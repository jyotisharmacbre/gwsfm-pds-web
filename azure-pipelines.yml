# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - master
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - web/*

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: PowerShell@2
  displayName: 'Code check-in Start Time'
  inputs:
    targetType: 'inline'
    script: |
      #check-in Start
      $checkinstartdate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=startTime]$checkinstartdate"

- task: PowerShell@2
  displayName: 'Code check-in End Time'
  inputs:
    targetType: 'inline'
    script: |
      #End check-in
      $checkinenddate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=endTime]$checkinenddate"

- task: restCallBuildTask@0
  displayName: 'Post Code check-in Metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 3,
      "AutomationToolId": 95,
      "Description": "code check-in",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: restCallBuildTask@0
  displayName: 'Post Build Artifact Metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 50,
      "AutomationToolId": 242,
      "Description": "Build Artifacts",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: restCallBuildTask@0
  displayName: 'Post Code Review Metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 54,
      "AutomationToolId": 242,
      "Description": "Code Review",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: restCallBuildTask@0
  displayName: 'Post Secret management Metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 56,
      "AutomationToolId": 242,
      "Description": "Secret management",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: restCallBuildTask@0
  displayName: 'Post Regression Test Metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 16,
      "AutomationToolId": 19,
      "Description": "Regression Test",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: NodeTool@0
  inputs:
    versionSpec: '12.x'
  displayName: 'Install Node.js'

- task: Npm@1
  displayName: 'npm install'
  inputs:
    workingDir: web
    verbose: false

- task: SonarQubePrepare@4
  displayName: 'Prepare analysis on SonarQube'
  inputs:
    SonarQube: 'SonarQube'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'gws-fm-pds-web'
    cliProjectName: 'gws-fm-pds-web'
    cliSources: './web'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example
      sonar.exclusions=**/web/public/**, **/web/src/**/*.scss, **/web/src/**/*.css,**/web/src/**/*.test.tsx,**/web/src/App.tsx,**/web/src/**/AuthProvider.js,**/web/src/**/Column.config.tsx,**/web/src/**/ConfigProvider.tsx,**/web/src/**/TelemetryProvider.tsx,**/web/src/**/Auth/Reducer.tsx,**/web/src/**/helpers/auth-helper.ts,**/web/src/**/Popup/QueryPopup.tsx,**/web/src/**/Error/Error.tsx,**/web/src/**/Popup/CustomModalPopup.tsx,**/web/src/**/ProjectOverviewForm/Actions.tsx,**/web/src/**/DiscountForm/Actions.tsx,**/web/src/**/SubContractor/Actions.tsx,**/web/src/**/views/ProjectOverview.tsx,/CustomerEnquiryForm/Reducer.tsx,**/web/src/**/UserPreferencesForm/Reducer.tsx,**/web/src/**/Menu/LeftMenu/index.tsx,**/web/src/**/*.js/,**/web/src/**/Action.tsx,**/web/src/**/int-helper.ts,**/web/src/**/serviceWorker.ts,**/web/src/**/setupTests.js,**/web/src/**/useTelemetryContext.tsx,**/web/src/**/useTrackEvent.tsx,**/web/src/**/components/Nav/Nav.tsx,**/web/src/index.tsx,**/web/src/**/PdsFormTypeAhead.tsx,**/web/src/**/Actions.tsx,**/web/src/**/Telemetry/TelemetryService.tsx
      sonar.typescript.lcov.reportPaths=$(System.DefaultWorkingDirectory)/web/coverage/lcov.info

- task: PowerShell@2
  displayName: 'Code Build start time'
  inputs:
    targetType: 'inline'
    script: |
      #check-build Start
      $CodeBuildstartdate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=CodeBuildstartTime]$CodeBuildstartdate"

- task: Npm@1
  displayName: 'npm run build'
  inputs:
    command: custom
    workingDir: web
    verbose: false
    customCommand: 'run build:ci'


- task: PowerShell@2
  displayName: 'Code Build End Time'
  inputs:
    targetType: 'inline'
    script: |
      #End Code Build
      $CodeBuildenddate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=CodeBuildendTime]$CodeBuildenddate"

- task: restCallBuildTask@0
  displayName: 'Post Code Build Metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 4,
      "AutomationToolId": 242,
      "Description": "Code Build",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(CodeBuildstartTime)",
      "EndDateTime": "$(CodeBuildendTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: PowerShell@2
  displayName: 'Unit Test Start Time'
  inputs:
    targetType: 'inline'
    script: |
      $TestStartdate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=TestStartTime]$TestStartdate"

- task: Npm@1
  displayName: 'Test Run'
  inputs:
    command: 'custom'
    workingDir: 'web'
    customCommand: 'run test:ci'

- task: PowerShell@2
  displayName: 'unit Test End Time'
  inputs:
    targetType: 'inline'
    script: |
      $TestEnddate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=TestEndTime]$TestEnddate"

- task: restCallBuildTask@0
  displayName: 'Post Unit test Metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 5,
      "AutomationToolId": 48,
      "Description": "Unit Test",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(TestStartTime)",
      "EndDateTime": "$(TestEndTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit.xml'

- task: PowerShell@2
  displayName: 'static code analysis start time'
  inputs:
    targetType: 'inline'
    script: |
      $StaticStartdate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=StaticStartTime]$StaticStartdate"

- task: SonarQubeAnalyze@4

- task: SonarQubePublish@4
  inputs:
    pollingTimeoutSec: '300'

- task: PowerShell@2
  displayName: 'static code analysis end time '
  inputs:
    targetType: 'inline'
    script: |
      $StaticEnddate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=StaticEndTime]$StaticEnddate"

- task: restCallBuildTask@0
  displayName: 'Post Static code analysis Matrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 45,
      "AutomationToolId": 22,
      "Description": "Static code analysis",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(StaticStartTime)",
      "EndDateTime": "$(StaticEndTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false

- task: restCallBuildTask@0
  displayName: 'Post Security Scan Matrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 19,
      "AutomationToolId": 22,
      "Description": "Security Scan",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(StaticStartTime)",
      "EndDateTime": "$(StaticEndTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false
  enabled: false


- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/web/coverage/cobertura-coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'web/build'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/web.zip'
    replaceExistingArchive: true
  displayName: "pack build"

- task: sonar-buildbreaker@8
  inputs:
    SonarQube: 'SonarQube'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: "Drop artifacts"
