# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - master
      - develop
      - feature/*
      - release/*
  paths:
    include:
      - web/*

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: PowerShell@2
  displayName: 'Code check-in Start Time'
  inputs:
    targetType: 'inline'
    script: |
      #check-in Start
      $checkinstartdate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=startTime]$checkinstartdate"

- task: PowerShell@2
  displayName: 'Code check-in End Time'
  inputs:
    targetType: 'inline'
    script: |
      #End check-in
      $checkinenddate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=endTime]$checkinenddate"

- task: restCallBuildTask@0
  displayName: 'Code check-in'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 3,
      "AutomationToolId": 95,
      "Description": "code check-in",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false

- task: restCallBuildTask@0
  displayName: 'Build Artifacst'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 50,
      "AutomationToolId": 242,
      "Description": "Build Artifacts",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false

- task: restCallBuildTask@0
  displayName: 'Code Review'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 54,
      "AutomationToolId": 242,
      "Description": "Code Review",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false

- task: restCallBuildTask@0
  displayName: 'Secret management'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 56,
      "AutomationToolId": 242,
      "Description": "Secret management",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(startTime)",
      "EndDateTime": "$(endTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- task: Npm@1
  displayName: 'npm install'
  inputs:
    workingDir: web
    verbose: false

- task: PowerShell@2
  displayName: 'Code Build start'
  inputs:
    targetType: 'inline'
    script: |
      #check-build Start
      $CodeBuildstartdate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=CodeBuildstartTime]$CodeBuildstartdate"

- task: Npm@1
  displayName: 'npm run build'
  inputs:
    command: custom
    workingDir: web
    verbose: false
    customCommand: 'run build'


- task: PowerShell@2
  displayName: 'Code Build End'
  inputs:
    targetType: 'inline'
    script: |
      #End Code Build
      $CodeBuildenddate=$(Get-Date -Format s);
      Write-Host "##vso[task.setvariable variable=CodeBuildendTime]$CodeBuildenddate"

- task: restCallBuildTask@0
  displayName: 'Code Build metrics'
  inputs:
    webserviceEndpoint: 'Metrics'
    relativeUrl: 
    httpVerb: 'POST'
    body: |
      {
      "ApplicationId": $(appID),
      "AutomationProcessId": 4,
      "AutomationToolId": 242,
      "Description": "Code Build",
      "Version": "$(BUILD.BUILDID)",
      "Cycle": "$(BUILD.BUILDID)",
      "Passed": 1,
      "Failed": 0,
      "Blocked": 0,
      "StartDateTime": "$(CodeBuildstartTime)",
      "EndDateTime": "$(CodeBuildendTime)"
      }
    contentType: 'application/json'
    allowInvalidSSLCertificate: false

- task: Npm@1
  displayName: 'Test Run'
  inputs:
    command: 'custom'
    workingDir: 'web'
    customCommand: 'run test:ci'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit.xml'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/web/coverage/cobertura-coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'web/build'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/web.zip'
    replaceExistingArchive: true
  displayName: "pack build"

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: "Drop artifacts"